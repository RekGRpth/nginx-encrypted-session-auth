# -----------------------------------------------------------------------------
## nginx-only authentication via HTTP POST request (login form)
# (needs ngx-auth-request, ngx-set-misc, ngx-form-input, ngx-proxy, 
# ngx-realip, ngx-echo and ngx-encrypted-session modules)


worker_processes  1;
access_log logs/access_log;
error_log logs/error.log;
events { worker_connections 1024; }

http {


# we redirect all HTTP -> HTTPS
server {
	listen 80;
	server_name example.com;
	# security headers
	add_header X-Content-Type-Options nosniff;                                                                        
	add_header X-Frame-Options "SAMEORIGIN";                                                                          
	add_header X-XSS-Protection "1; mode=block";
	add_header X-Robots-Tag none;
	# redirect
	return 301 https://$server_name$request_uri; 
}


# main server
server {
        listen 443 ssl;
        server_name example.com;
        root htdocs;
        error_log logs/error_log notice;
        access_log logs/access_log;

        # security headers
        add_header Strict-Transport-Security "";
	add_header X-Content-Type-Options nosniff;
	add_header X-Frame-Options "SAMEORIGIN";
	add_header X-XSS-Protection "1; mode=block";
	add_header X-Robots-Tag none;

        # ssl
        ssl on;
	ssl_session_timeout 5m;                                                                                                
	ssl_session_cache builtin:1000 shared:SSL:5m;
	ssl_protocols TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
	ssl_prefer_server_ciphers on;                                                                                          
	add_header Strict-Transport-Security max-age=15768000;
	#ssl_stapling on;
	ssl_stapling_verify on;
        ssl_certificate /etc/ssl/nginx/nginx.crt;
        ssl_certificate_key /etc/ssl/nginx/nginx.key;
        ssl_trusted_certificate /etc/ssl/nginx/nginx.pem;
        #ssl_dhparam /etc/ssl/nginx/dhparam.pem;
        add_header content-security-policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src 'self' data: blob:; font-src 'self' data:; media-src 'self'; connect-src 'self'";

        index index.html;

	# enable cache by default
        expires 0;
	add_header Cache-Control "private, must-revalidate, proxy-revalidate";

        # redirect http traffic to port 443 to https scheme
        if ( $scheme = "http" ) {
    	    rewrite  ^/(.*)$  https://$server_name$request_uri permanent;
	}

        # encryption key must be of 32 bytes long
        encrypted_session_key "C8Hf4qF59zdAF1axHr5daLdpPk1W4xIS";
        # iv must not be longer than 16 bytes
        encrypted_session_iv "VK2Y5MojsE9lNNCr";
        encrypted_session_expires 30d;

        # set "X-Username" header to current username
	auth_request_set $username $upstream_http_x_username;
	# authenticate using the result of a request to /auth
	auth_request /auth;


        # authenticated default
	location / {
	    # cache
	    add_header Pragma no-cache;
	    add_header Cache-Control "private, max-age=0, no-cache";
	    expires 30d;

	    # max. cache for some filetypes
	    location ~* \.(js|css|png|jpeg|jpg|gif|ico|pdf|svg|zip|swf|bmp|woff|ttf|json)$
	    {
		expires max;
	    }

	    # take files from users directory
	    alias htdocs/users/$username/;
	}

	# redirect to login page when not authorized
	error_page 401 = @error401;
	location @error401 {
	    # redirect to login form
    	    return 301 https://$server_name/login.html;
	}


	# logout
	location /logout {
	    # disable cache
	    add_header Pragma no-cache;
	    add_header Cache-Control "private, max-age=0, no-cache";
	    # remove Authorization header
	    add_header Authorization "";
	    # remove authtoken cookie
	    add_header Set-Cookie "auth='';Path=/;Max-Age=0;Secure;Discard;";
	    # back to login
	    return 301 https://$server_name/login.html;
	}

	# favicon
	location /favicon.ico {
	    auth_request off;
	}

	# html login form
	location /login.html {
	    # no authentication required here
	    auth_request off;
	}

	# POST target of our login form
	location /login {
	    # disable cache
	    add_header Pragma no-cache;
	    add_header Cache-Control "private, max-age=0, no-cache";

	    # store form input in variables
	    set_form_input $username;
	    set_form_input $password;

	    # decode
	    set_unescape_uri $enc_user $username;
	    set_unescape_uri $enc_pass $password;

	    # construct encrypted auth-token
	    set_encrypt_session $auth "${enc_user}:${enc_pass}";
            set_encode_base64 $auth;

	    # set auth-token as cookie
	    add_header Set-Cookie "auth=${auth};Path=/;Max-Age=2592000;Secure;Discard;";

	    # redirect to welcome-page (login successful)
	    return 301 https://$server_name/;
	}


	# authenticate with subrequest to server that uses auth_basic
	location /auth {
	    # disable logging here
	    access_log off;
	    # decrypt authtoken
	    set_decode_base64 $auth_crypt $cookie_auth;
            set_decrypt_session $auth $auth_crypt;
            # auth_basic method of proxy expects BASE64
            # encoded "Authorization" header (username:password)
            set_encode_base64 $auth;
            # set authentication headers (needed for http basic auth)
	    proxy_set_header Authorization "Basic ${auth}";
	    proxy_set_header Content-Length "";
	    proxy_set_header X-Original-URI $request_uri;
	    proxy_set_header X-Original-Addr $remote_addr;
	    # pass to authentication server
	    proxy_pass_request_body off;
	    proxy_pass_header Authorization;
	    proxy_pass_header Content-Length;
	    proxy_pass_header X-Original-URI;
	    proxy_pass http://127.0.0.1:8888/auth;
	}

}

# authentication server (basic auth)
server {
    listen 127.0.0.1:8888;
    server_name example.com;
    root htdocs;

    # log the real client IP (for fail2ban)
    real_ip_header X-Original-Addr;
    set_real_ip_from 127.0.0.1;

    # basic authentication
    auth_basic "nginx only login-form (yay!)";
    auth_basic_user_file passwd;

    # authorized
    location / {
	# add username of authorized user as header,
	# so we can use it for user directories
	add_header X-Username $remote_user;
	echo "access granted";
    }
}

}
